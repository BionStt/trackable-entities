<#@ template language="C#" HostSpecific="True" #>
<#
var Model = (MvcTextTemplateHost)Host;
var routePrefix = "api/" + Model.ControllerRootName;
#>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Objects" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using TrackableEntities.EF5;
<# if (MvcTextTemplateHost.NamespaceNeeded(Model.Namespace, Model.ModelType.Namespace))
 { #>
using <#= Model.ModelType.Namespace #>;
<# } #>
<# if (Model.ContextType.Namespace != Model.ModelType.Namespace && MvcTextTemplateHost.NamespaceNeeded(Model.Namespace, Model.ContextType.Namespace))
 { #>
using <#= Model.ContextType.Namespace #>;
<# } #>

namespace <#= Model.Namespace #>
{
<#
    var modelName = Model.ModelType.Name;
    var entitySetName = Model.EntitySetName;
    var modelVariable = modelName.ToLowerInvariant();
    var entitySetVariable = entitySetName.ToLowerInvariant();
    var primaryKey = Model.PrimaryKeys[0];
    var lambdaVar = modelVariable[0];
    var pluralizer = Model.Pluralizer;
#>
    public class <#= Model.ControllerName #> : ApiController
    {
        private readonly <#= Model.ContextType.Name #> _dbContext = new <#= Model.ContextType.Name #>();

        // GET <#= routePrefix #>
        public IEnumerable<<#= modelName #>> Get<#= pluralizer.Pluralize(modelName) #>()
        {
<#  var includeExpressions = String.Join("", Model.RelatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.PropertyName)));
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
            IEnumerable<<#= modelName #>> <#= entitySetVariable #> = _dbContext.<#= entitySetName #><#= includeExpressions #>
				.ToList();
<# } else { #>
            IEnumerable<<#= modelName #>> <#= entitySetVariable #> = _dbContext.<#= entitySetName #>
				.ToList();
<# } #>
            return <#= entitySetVariable #>;
        }

        // GET <#= routePrefix #>/5
        public <#= modelName #> Get<#= modelName #>(<#= primaryKey.ShortTypeName #> id)
        {
            <#= modelName #> <#= modelVariable #> = _dbContext.<#= entitySetName #><#= includeExpressions #>
                .SingleOrDefault(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
            if (<#= modelVariable #> == null)
            {
                throw new HttpResponseException(Request.CreateResponse(HttpStatusCode.NotFound));
            }
            return <#= modelVariable #>;
        }

        // PUT <#= routePrefix #>
        public HttpResponseMessage Put<#= modelName #>(<#= modelName #> <#= modelVariable #>)
        {
            if (!ModelState.IsValid)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            }

            try
            {
                _dbContext.ApplyChanges(<#= modelVariable #>);
                _dbContext.SaveChanges();

                HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.OK, <#= modelVariable #>);
                return response;
            }
            catch (DbUpdateConcurrencyException ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.NotFound, ex);
            }
        }

        // POST <#= routePrefix #>
        public HttpResponseMessage Post<#= modelName #>(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
				_dbContext.<#= entitySetName #>.Add(<#= modelVariable #>);
                _dbContext.SaveChanges();
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>

                var ctx = ((IObjectContextAdapter) _dbContext).ObjectContext;
<# foreach(var prop in Model.RelatedProperties.Values) {
		var propName = prop.PropertyName;
#>                ctx.LoadProperty(<#= modelVariable #>, <#= lambdaVar #> => <#= lambdaVar #>.<#= propName #>);
<# } } #>

                HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.Created, <#= modelVariable #>);
                response.Headers.Location = new Uri(Url.Link("DefaultApi", new { id = <#= modelVariable #>.<#= primaryKey.Name #> }));
                return response;
            }
            return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
        }

        // DELETE <#= routePrefix #>/5
		// TODO: Accept entity concurrency property (rowversion)
        public HttpResponseMessage Delete<#= modelName #>(<#= primaryKey.ShortTypeName #> id)
        {
            <#= modelName #> <#= modelVariable #> = _dbContext.<#= entitySetName #>
                .SingleOrDefault(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
            if (<#= modelVariable #> == null)
            {
                return Request.CreateResponse(HttpStatusCode.OK);
            }
            _dbContext.<#= entitySetName #>.Attach(<#= modelVariable #>);
            _dbContext.<#= entitySetName #>.Remove(<#= modelVariable #>);

            try
            {
                _dbContext.SaveChanges();
            }
            catch (DbUpdateConcurrencyException ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.NotFound, ex);
            }
            return Request.CreateResponse(HttpStatusCode.OK);
        }

        protected override void Dispose(bool disposing)
        {
            _dbContext.Dispose();
            base.Dispose(disposing);
        }
    }
}