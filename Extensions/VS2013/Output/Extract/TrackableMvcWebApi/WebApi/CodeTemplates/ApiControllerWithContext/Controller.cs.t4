<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
var routePrefix = "api/" + ControllerRootName;
#>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Web.Http;
using System.Web.Http.Description;
using TrackableEntities.EF6;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVariable = ModelMetadata.EntitySetName.ToLowerInvariant();
    var lambdaVar = ModelVariable[0];
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
	var includeExpressions = String.Join("", ModelMetadata.RelatedEntities.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
#>
    public class <#= ControllerName #> : ApiController
    {
        private readonly <#= ContextTypeName #> _dbContext = new <#= ContextTypeName #>();

        // GET <#= routePrefix #>
        [ResponseType(typeof(IEnumerable<<#= ModelTypeName #>>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Get<#= entitySetName #>()
<# } else { #>
        public IHttpActionResult Get<#= entitySetName #>()
<# } #>
        {
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
	<# if (UseAsync) { #>
        IEnumerable<<#= ModelTypeName #>> <#= entitySetVariable #> = await _dbContext.<#= entitySetName #>
				<#= includeExpressions #>
				.ToListAsync();
	<# } else { #>
        IEnumerable<<#= ModelTypeName #>> <#= entitySetVariable #> = _dbContext.<#= entitySetName #>
				<#= includeExpressions #>
				.ToList();
	<# } #>
<# } else { #>
	<# if (UseAsync) { #>
        IEnumerable<<#= ModelTypeName #>> <#= entitySetVariable #> = await _dbContext.<#= entitySetName #>.ToListAsync();
	<# } else { #>
        IEnumerable<<#= ModelTypeName #>> <#= entitySetVariable #> = _dbContext.<#= entitySetName #>.ToList();
	<# } #>
<# } #>

            return Ok(<#= entitySetVariable #>);
        }

        // GET <#= routePrefix #>/5
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public IHttpActionResult Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
	<# if (UseAsync) { #>
        <#= ModelTypeName #> <#= ModelVariable #> = await _dbContext.<#= entitySetName #>
				<#= includeExpressions #>
				.SingleOrDefaultAsync(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == id);
	<# } else { #>
        <#= ModelTypeName #> <#= ModelVariable #> = _dbContext.<#= entitySetName #>
				<#= includeExpressions #>
				.SingleOrDefault(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == id);
	<# } #>
<# } else { #>
	<# if (UseAsync) { #>
        <#= ModelTypeName #> <#= ModelVariable #> = await _dbContext.<#= entitySetName #>.SingleOrDefaultAsync(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == id);
	<# } else { #>
        <#= ModelTypeName #> <#= ModelVariable #> = _dbContext.<#= entitySetName #>.SingleOrDefault(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == id);
	<# } #>
<# } #>

            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }
            return Ok(<#= ModelVariable #>);
        }

        // PUT <#= routePrefix #>
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Put<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Put<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
				// Update object graph entity state
                _dbContext.ApplyChanges(<#= ModelVariable #>);
<# if (UseAsync) { #>
                await _dbContext.SaveChangesAsync();
<# } else { #>
                _dbContext.SaveChanges();
<# } #>
	            return Ok(<#= ModelVariable #>);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_dbContext.<#= entitySetName #>.Any(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == <#= ModelVariable #>.<#= primaryKeyName #>))
                {
                    return NotFound();
                }
                throw;
            }
        }

        // POST <#= routePrefix #>
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Post<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Post<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            _dbContext.<#= entitySetName #>.Add(<#= ModelVariable #>);
<# if(primaryKeyIsAutoGenerated) { #>
<#		if (UseAsync) { #>
            await _dbContext.SaveChangesAsync();
<#		} else { #>
            _dbContext.SaveChanges();
<#		} #>
<# } else { #>

            try
            {
<#		if (UseAsync) { #>
                await _dbContext.SaveChangesAsync();
<#		} else { #>
                _dbContext.SaveChanges();
<#		} #>
            }
            catch (DbUpdateException)
            {
                if (_dbContext.<#= entitySetName #>.Any(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == <#= ModelVariable #>.<#= primaryKeyName #>))
                {
                    return Conflict();
                }
                throw;
            }
<# } #>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>

            var ctx = ((IObjectContextAdapter) _dbContext).ObjectContext;
<# foreach(var prop in ModelMetadata.RelatedEntities) {
		var propName = prop.AssociationPropertyName;
#>            ctx.LoadProperty(<#= ModelVariable #>, <#= lambdaVar #> => <#= lambdaVar #>.<#= propName #>);
<# } } #>

            return CreatedAtRoute("DefaultApi", new { id = <#= ModelVariable #>.<#= primaryKeyName #> }, <#= ModelVariable #>);
        }

        // DELETE <#= routePrefix #>/5
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public IHttpActionResult Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
	<# if (UseAsync) { #>
        <#= ModelTypeName #> <#= ModelVariable #> = await _dbContext.<#= entitySetName #>
				<#= includeExpressions #>
				.SingleOrDefaultAsync(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == id);
	<# } else { #>
        <#= ModelTypeName #> <#= ModelVariable #> = _dbContext.<#= entitySetName #>
				<#= includeExpressions #>
				.SingleOrDefault(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == id);
	<# } #>
<# } else { #>
	<# if (UseAsync) { #>
        <#= ModelTypeName #> <#= ModelVariable #> = await _dbContext.<#= entitySetName #>.SingleOrDefaultAsync(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == id);
	<# } else { #>
        <#= ModelTypeName #> <#= ModelVariable #> = _dbContext.<#= entitySetName #>.SingleOrDefault(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == id);
	<# } #>
<# } #>
        if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

            _dbContext.<#= entitySetName #>.Attach(<#= ModelVariable #>);
            _dbContext.<#= entitySetName #>.Remove(<#= ModelVariable #>);

            try
            {
<# if (UseAsync) { #>
	            await _dbContext.SaveChangesAsync();
<# } else { #>
	            _dbContext.SaveChanges();
<# } #>
                return Ok();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_dbContext.<#= entitySetName #>.Any(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKeyName #> == <#= ModelVariable #>.<#= primaryKeyName #>))
                {
                    return NotFound();
                }
                throw;
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _dbContext.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}